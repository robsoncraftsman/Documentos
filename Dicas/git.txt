//Configurações básicas do Git
git config --global user.name "Robson S. Rodrigues"

git config --global user.email "robsoncraftsman@gmail.com"

git config --global core.editor code --wait

//Criar alias para os comandos
git config --global --edit
> Criar uma sessão [alias]
> Usar o formato alias = !<cmd git>
> Ex: l = !git log
> Ex: s = !git status -s
> Ex: c = !git add . && git commit -m 

//Mostra o valor de uma configuração
git config user.name

//Lista todas as configurações
git config --list

//Inicializa a pasta em questão para usar o Git
git init

//Verifica a situação do repositório
git status

//Adiciona um arquivo no Git
//se ele for modificado, deve rodar o comando novamente para ele
//ser atualizado no "staged"
git add <nome_arquivo>

//Mudar nome de uma pasta
git mv <old name> <new name>

//Commit da versão
git commit -m "Mensagem dizendo o que foi alterado"

//Commit incluindo arquivos pendentes
git commit -am "Mensagem dizendo o que foi alterado"

//Log das alterações
git log
git log -3 (nro de commits que deverão aparecer no log)
git log --decorate
git log --author="Nome do autor"
git log --since="Jan 1 2018" (exclui a data passada como parâmetro)
git log --until="Jan 1 2019" (exclui a data passada como parâmetro)
git log --graph
git log --pretty=oneline
git log --pretty=oneline --graph --all
git shortlog
git shortlog -sn
git reflog
git log --pretty=format:'%C(yellow)%h %d%C(cyan)- %cn - %cr - %C(green)%s'

//Mostrar alterações realizadas em um commit
git show <hash>

//Mostrar alterações realizadas em desenvolvimento
git diff
git diff --name-only
git diff master <nome_arquivo>

//Desfazer uma alteração e um arquivo antes do "staged"
git checkout "nome_do_arquivo"

//Desfazer uma alteração em um arquivo após o "staged"
git reset HEAD "home_do_arquivo"

//Revertendo alterações sem perder o commit (gera um novo commit com o revert)
git revert <hash_alvo>

//Revertendo alterações apagando os commits subsequentes (usar apenas em branches)
//git reset --soft|--mixed|--hard <hash da versão para qual você quer voltar>
git reset --soft <hash_alvo>

//Linkando com um repositório remoto
git remote add origin <endereco_repositorio_remoto>

//Alterando a URL remota
git remote set-url origin <endereco_repositorio_remoto>

//Listando os repositórios remotos
git remote
git remote -v

//Enviando alterações para repositório remoto e linkando para futuros comamdos
git push -u origin master

//Enviando alterações (após feito o link com -u)
git push

//Pegando as alterações (após feito o link com -u)
git pull

//Pegando as alterações e fazendo rebase qdo houver alterações no Github
git pull origin master --rebase

//Baixar um novo repositório na máquina
git clone <url_repositório_remoto> <pasta_local>

//Criar um branch
git branch <nome_branch>
git checkout <nome_branch>

//Ou
git checkout -b <nome_branch>

//Listar as branchs do projeto
git branch

//Alterar entre os branchs
git checkout <nome_branch>

//Excluir um branch
git branch -D <nome_branch>

//Excluir uma branch remota
git push origin --delete <nome_branch>

//OU 
git push origin :<nome_branch>

//Fazer merge da branch para a master
git checkout master
git merge <nome_branch_origem>

//Ou
git merge master <nome_branch_origem>

//Após resolver conflitos
git merge --continue

//Fazer rebase da branch para a master
git checkout master
git rebase <nome_branch_origem>

//Move a alterações em progresso (WIP) para uma área temporária
//É possível fazer um stash numa branch e depois fazer o apply na master 
git stash

//Restaura as alterações temporárias (para uma branch ou master)
git stash apply

//Lista as stashs criadas
git stash list

//Limpa as alterações temporárias
git stash clear

//Criar alias para comandos do Git
git config --global alias.<alias_comando> <comando_git>

//Lista tags/versões
git tag

//Procurar tags
git tag -l "1.*"

//Criar tags
git tag -a 1.0.0 -m "Version 1.0.0"

//Criar tag para um commit já existente
git tag -a 1.0.0 -m "Version 1.0.0" <hash_do_commit>

//Subir TODAS tags para o reposítório remoto
git push origin --tags

//Subir uma tag específica para o repositório remoto
git push origin <nome_tag>

//Apagar tag local
git tag -d <nome_tag>

//Apagar tag remota
git push origin --delete <nome_tag>

//Ou
git push origin :<nome_tag>

//Checkout de uma tag
git checkout <nome_tag>

//Criando uma branch de uma tag específica
git checkout -b <nome_branch> <nome_tag>

//Linkar uma branch local com um repositório remoto
git branch --set-upstream-to=origin/master <branch_local>
	
//Pega commit de outra branch e copia para master
git cherry-pick <hash_do_commit>
	
//Comitar trechos especificos de um arquivo
git add -p

//Corrigir um commit, mantendo o histórico
git commit --fixup <hash_do_commit>

//Corrigir último commit (arquivos ou mensagem)
//(IMPORTANTE: Se tiver alterações staged, substitui as alterações também)
git commit --amend -m "Message"

//Excluir o último commit, mantendo as alterações locais
git reset HEAD^

//Mesclar commits de forma interativa (fixup, squash - usar apenas em branches)
git rebase -i HEAD~2

//Gerar zip do repositório local
git archive master --format=zip --output=file.zip

//Referenciar issues do Github no commit do git
https://help.github.com/en/articles/closing-issues-using-keywords

//Material para utilização do GitFlow
https://danielkummer.github.io/git-flow-cheatsheet

//Instalar o GitFlow
sudo apt-get install git-flow

